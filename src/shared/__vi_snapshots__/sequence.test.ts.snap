// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`containingEqualSequence > fails if no expected values are passed 1`] = `
expect.containingEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`containingEqualSequence > fails if only part of the sequence is found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { Object (array) }`;

exports[`containingEqualSequence > fails if only part of the sequence is found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { Object (array) }`;

exports[`containingEqualSequence > fails if the sequence is not found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { Object (array) }`;

exports[`containingEqualSequence > fails if the sequence is not found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { Object (array) }`;

exports[`containingSequence > fails if no expected values are passed 1`] = `
expect.containingSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`containingSequence > fails if only part of the sequence is found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: containingSequence<1, 3> }`;

exports[`containingSequence > fails if only part of the sequence is found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: containingSequence<1, 3> }`;

exports[`containingSequence > fails if the sequence is not found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: containingSequence<2, 1> }`;

exports[`containingSequence > fails if the sequence is not found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: containingSequence<2, 1> }`;

exports[`containingSequenceSatisfying > fails if no predicates are passed 1`] = `
expect.containingSequenceSatisfying(expected)

Matcher error: At least one predicate must be provided
`;

exports[`containingSequenceSatisfying > fails if one of the predicates is not a function 1`] = `
expect.containingSequenceSatisfying(expected)

Matcher error: All predicates must be functions

Predicate at index 1 has type:  number
Predicate at index 1 has value: 1
`;

exports[`containingSequenceSatisfying > fails if only part of the sequence is found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { …(1) }`;

exports[`containingSequenceSatisfying > fails if only part of the sequence is found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { …(1) }`;

exports[`containingSequenceSatisfying > fails if the sequence is not found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { …(1) }`;

exports[`containingSequenceSatisfying > fails if the sequence is not found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if no expected values are passed 1`] = `
expect.containingStrictEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`containingStrictEqualSequence > fails if only part of the sequence is found 1`] = `expected { array: [ { value: 1 }, …(2) ] } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if only part of the sequence is found 2`] = `expected { array: Set{ { value: 1 }, …(2) } } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if the sequence is not found 1`] = `expected { array: [ { value: 1 }, …(2) ] } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if the sequence is not found 2`] = `expected { array: Set{ { value: 1 }, …(2) } } to deeply equal { …(1) }`;

exports[`sequence > fails if not passed any predicates 1`] = `
expect.sequence(expected)

Matcher error: At least one predicate must be provided
`;

exports[`sequence > fails if the iterable is too short 1`] = `expected { array: [ +0 ] } to deeply equal { array: sequence{…} }`;

exports[`sequence > fails if the iterable is too short 2`] = `expected { array: Set{ +0 } } to deeply equal { array: sequence{…} }`;

exports[`sequence > fails with a non-iterable 1`] = `expected { array: +0 } to deeply equal { array: sequence<(x) => x === 0> }`;

exports[`sequence > throws if one of the predicates is not a function 1`] = `
expect.sequence(expected)

Matcher error: All predicates must be functions

Predicate at index 1 has type:  number
Predicate at index 1 has value: 1
`;

exports[`sequence > works with an array 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: sequence{…} }`;

exports[`sequence > works with an array 2`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: not.sequence{…} }`;

exports[`sequence > works with other iterables 1`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: sequence{…} }`;

exports[`sequence > works with other iterables 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: not.sequence{…} }`;

exports[`sequenceMatching > fails if the iterable is too short 1`] = `expected { array: [ +0 ] } to deeply equal { array: sequenceMatching<0, 1> }`;

exports[`sequenceMatching > fails if the iterable is too short 2`] = `expected { array: Set{ +0 } } to deeply equal { array: sequenceMatching<0, 1> }`;

exports[`sequenceMatching > fails with a non-iterable 1`] = `expected { array: +0 } to deeply equal { array: sequenceMatching<0> }`;

exports[`sequenceMatching > works with an array 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: sequenceMatching<1, 3, 2> }`;

exports[`sequenceMatching > works with an array 2`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: not.sequenceMatching<1, 2> }`;

exports[`sequenceMatching > works with other iterables 1`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: sequenceMatching<1, 3, 2> }`;

exports[`sequenceMatching > works with other iterables 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: not.sequenceMatching<1, 2> }`;

exports[`sequenceOf > fails if the iterable is too short 1`] = `expected { value: [ +0 ] } to deeply equal { value: sequenceOf<0, 1> }`;

exports[`sequenceOf > fails if the iterable is too short 2`] = `expected { value: Set{ +0 } } to deeply equal { value: sequenceOf<0, 1> }`;

exports[`sequenceOf > fails with a non-iterable 1`] = `expected { value: +0 } to deeply equal { value: sequenceOf<0> }`;

exports[`sequenceOf > throws if no expected values are passed 1`] = `
expect.sequenceOf(expected)

Matcher error: At least one expected item must be provided
`;

exports[`sequenceOf > works with an array 1`] = `expected { value: [ 1, 2, 3 ] } to deeply equal { value: sequenceOf<1, 3, 2> }`;

exports[`sequenceOf > works with an array 2`] = `expected { value: [ 1, 2, 3 ] } to deeply equal { value: not.sequenceOf<1, 2> }`;

exports[`sequenceOf > works with other iterables 1`] = `expected { value: Set{ 1, 2, 3 } } to deeply equal { value: sequenceOf<1, 3, 2> }`;

exports[`sequenceOf > works with other iterables 2`] = `expected { value: Set{ 1, 2, 3 } } to deeply equal { value: not.sequenceOf<1, 2> }`;

exports[`strictSequenceOf > fails if the iterable is too short 1`] = `expected { value: [ { value: +0 } ] } to deeply equal { value: strictSequenceOf{…} }`;

exports[`strictSequenceOf > fails if the iterable is too short 2`] = `expected { value: Set{ { value: +0 } } } to deeply equal { value: strictSequenceOf{…} }`;

exports[`strictSequenceOf > fails with a non-iterable 1`] = `expected { value: +0 } to deeply equal { value: strictSequenceOf<0> }`;

exports[`strictSequenceOf > throws if no expected values are passed 1`] = `
expect.strictSequenceOf(expected)

Matcher error: At least one expected item must be provided
`;

exports[`strictSequenceOf > works with an array 1`] = `expected { value: [ { value: 1 }, …(2) ] } to deeply equal { value: strictSequenceOf{…} }`;

exports[`strictSequenceOf > works with other iterables 1`] = `expected { value: Set{ { value: 1 }, …(2) } } to deeply equal { value: strictSequenceOf{…} }`;

exports[`toBeSequence > fails if no expected values are passed 1`] = `
expect(received).toEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`toBeSequence > fails if the iterable is too short 1`] = `
expect(received).toBeSequence(expected)

Expected [0] to have at least 2 items, but it only had 1.
`;

exports[`toBeSequence > fails if the iterable is too short 2`] = `
expect(received).toBeSequence(expected)

Expected Set {0} to have at least 2 items, but it only had 1.
`;

exports[`toBeSequence > fails with a non-iterable 1`] = `
expect(received).toBeSequence(expected)

Expected 0 to be an iterable, but it was not
`;

exports[`toBeSequence > works with an array 1`] = `
expect(received).toBeSequence(expected)

Expected 2 to match 3 at index 1

Full sequence so far: 1, 2
`;

exports[`toBeSequence > works with an array 2`] = `
expect(received).not.toBeSequence(expected)

Expected [1, 2, 3] not to match sequence 1, 2
`;

exports[`toBeSequence > works with other iterables 1`] = `
expect(received).toBeSequence(expected)

Expected 2 to match 3 at index 1

Full sequence so far: 1, 2
`;

exports[`toBeSequence > works with other iterables 2`] = `
expect(received).not.toBeSequence(expected)

Expected Set {1, 2, 3} not to match sequence 1, 2
`;

exports[`toContainEqualSequence > fails if no expected values are passed 1`] = `
expect(received).toContainEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`toContainEqualSequence > fails if only part of the sequence is found 1`] = `
expect(received).toContainEqualSequence(expected)

Expected [1, 2, 3] to contain sequence 1, 3

Full sequence: 1, 2, 3
`;

exports[`toContainEqualSequence > fails if only part of the sequence is found 2`] = `
expect(received).toContainEqualSequence(expected)

Expected Set {1, 2, 3} to contain sequence 1, 3

Full sequence: 1, 2, 3
`;

exports[`toContainEqualSequence > fails if the sequence is not found 1`] = `
expect(received).toContainEqualSequence(expected)

Expected [1, 2, 3] to contain sequence 2, 1

Full sequence: 1, 2, 3
`;

exports[`toContainEqualSequence > fails if the sequence is not found 2`] = `
expect(received).toContainEqualSequence(expected)

Expected Set {1, 2, 3} to contain sequence 2, 1

Full sequence: 1, 2, 3
`;

exports[`toContainSequence > fails if no expected values are passed 1`] = `
expect(received).toContainSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`toContainSequence > fails if only part of the sequence is found 1`] = `
expect(received).toContainSequence(expected)

Expected [1, 2, 3] to contain sequence 1, 3

Full sequence: 1, 2, 3
`;

exports[`toContainSequence > fails if only part of the sequence is found 2`] = `
expect(received).toContainSequence(expected)

Expected Set {1, 2, 3} to contain sequence 1, 3

Full sequence: 1, 2, 3
`;

exports[`toContainSequence > fails if the sequence is not found 1`] = `
expect(received).toContainSequence(expected)

Expected [1, 2, 3] to contain sequence 2, 1

Full sequence: 1, 2, 3
`;

exports[`toContainSequence > fails if the sequence is not found 2`] = `
expect(received).toContainSequence(expected)

Expected Set {1, 2, 3} to contain sequence 2, 1

Full sequence: 1, 2, 3
`;

exports[`toContainSequenceSatisfying > fails if no predicates are passed 1`] = `
expect(received).toContainSequenceSatisfying(expected)

Matcher error: At least one predicate must be provided
`;

exports[`toContainSequenceSatisfying > fails if one of the predicates is not a function 1`] = `
expect(received).toContainSequenceSatisfying(expected)

Matcher error: All predicates must be functions

Predicate at index 1 has type:  number
Predicate at index 1 has value: 1
`;

exports[`toContainSequenceSatisfying > fails if only part of the sequence is found 1`] = `
expect(received).toContainSequenceSatisfying(expected)

Expected [1, 2, 3] to contain sequence satisfying predicates

Full sequence: 1, 2, 3
`;

exports[`toContainSequenceSatisfying > fails if only part of the sequence is found 2`] = `
expect(received).toContainSequenceSatisfying(expected)

Expected Set {1, 2, 3} to contain sequence satisfying predicates

Full sequence: 1, 2, 3
`;

exports[`toContainSequenceSatisfying > fails if the sequence is not found 1`] = `
expect(received).toContainSequenceSatisfying(expected)

Expected [1, 2, 3] to contain sequence satisfying predicates

Full sequence: 1, 2, 3
`;

exports[`toContainSequenceSatisfying > fails if the sequence is not found 2`] = `
expect(received).toContainSequenceSatisfying(expected)

Expected Set {1, 2, 3} to contain sequence satisfying predicates

Full sequence: 1, 2, 3
`;

exports[`toContainStrictEqualSequence > fails if no expected values are passed 1`] = `
expect(received).toContainStrictEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`toContainStrictEqualSequence > fails if only part of the sequence is found 1`] = `
expect(received).toContainStrictEqualSequence(expected)

Expected [{"value": 1}, {"value": 2}, {"value": 3}] to contain sequence {"value": 1}, {"value": 3}

Full sequence: {"value": 1}, {"value": 2}, {"value": 3}
`;

exports[`toContainStrictEqualSequence > fails if only part of the sequence is found 2`] = `
expect(received).toContainStrictEqualSequence(expected)

Expected Set {{"value": 1}, {"value": 2}, {"value": 3}} to contain sequence {"value": 1}, {"value": 3}

Full sequence: {"value": 1}, {"value": 2}, {"value": 3}
`;

exports[`toContainStrictEqualSequence > fails if the sequence is not found 1`] = `
expect(received).toContainStrictEqualSequence(expected)

Expected [{"value": 1}, {"value": 2}, {"value": 3}] to contain sequence {"value": 2}, {"value": 1}

Full sequence: {"value": 1}, {"value": 2}, {"value": 3}
`;

exports[`toContainStrictEqualSequence > fails if the sequence is not found 2`] = `
expect(received).toContainStrictEqualSequence(expected)

Expected Set {{"value": 1}, {"value": 2}, {"value": 3}} to contain sequence {"value": 2}, {"value": 1}

Full sequence: {"value": 1}, {"value": 2}, {"value": 3}
`;

exports[`toEqualSequence > fails if no expected values are passed 1`] = `
expect(received).toEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`toEqualSequence > fails if the iterable is too short 1`] = `
expect(received).toEqualSequence(expected)

Expected [0] to have at least 2 items, but it only had 1.
`;

exports[`toEqualSequence > fails if the iterable is too short 2`] = `
expect(received).toEqualSequence(expected)

Expected Set {0} to have at least 2 items, but it only had 1.
`;

exports[`toEqualSequence > fails with a non-iterable 1`] = `
expect(received).toEqualSequence(expected)

Expected 0 to be an iterable, but it was not
`;

exports[`toEqualSequence > works with an array 1`] = `
expect(received).toEqualSequence(expected)

Expected 2 to match 3 at index 1

Full sequence so far: 1, 2
`;

exports[`toEqualSequence > works with an array 2`] = `
expect(received).not.toEqualSequence(expected)

Expected [1, 2, 3] not to match sequence 1, 2
`;

exports[`toEqualSequence > works with other iterables 1`] = `
expect(received).toEqualSequence(expected)

Expected 2 to match 3 at index 1

Full sequence so far: 1, 2
`;

exports[`toEqualSequence > works with other iterables 2`] = `
expect(received).not.toEqualSequence(expected)

Expected Set {1, 2, 3} not to match sequence 1, 2
`;

exports[`toSatisfySequence > fails if not passed any predicates 1`] = `
expect(received).toSatisfySequence(expected)

Matcher error: At least one predicate must be provided
`;

exports[`toSatisfySequence > fails if the iterable is too short 1`] = `
expect(received).toSatisfySequence(expected)

Expected [0] to have at least 2 items, but it only had 1.
`;

exports[`toSatisfySequence > fails if the iterable is too short 2`] = `
expect(received).toSatisfySequence(expected)

Expected Set {0} to have at least 2 items, but it only had 1.
`;

exports[`toSatisfySequence > fails with a non-iterable 1`] = `
expect(received).toSatisfySequence(expected)

Expected 0 to be an iterable
`;

exports[`toSatisfySequence > throws if one of the predicates is not a function 1`] = `
expect(received).toSatisfySequence(expected)

Matcher error: All predicates must be functions

Predicate at index 1 has type:  number
Predicate at index 1 has value: 1
`;

exports[`toSatisfySequence > works with an array 1`] = `
expect(received).toSatisfySequence(expected)

Expected 2 to satisfy predicate at index 1.

Full sequence so far: 1, 2
`;

exports[`toSatisfySequence > works with an array 2`] = `
expect(received).not.toSatisfySequence(expected)

Expected [1, 2, 3] not to satisfy sequence
`;

exports[`toSatisfySequence > works with other iterables 1`] = `
expect(received).toSatisfySequence(expected)

Expected 2 to satisfy predicate at index 1.

Full sequence so far: 1, 2
`;

exports[`toSatisfySequence > works with other iterables 2`] = `
expect(received).not.toSatisfySequence(expected)

Expected Set {1, 2, 3} not to satisfy sequence
`;

exports[`toStrictEqualSequence > fails if no expected values are passed 1`] = `
expect(received).toStrictEqualSequence(expected)

Matcher error: At least one expected item must be provided
`;

exports[`toStrictEqualSequence > fails if the iterable is too short 1`] = `
expect(received).toStrictEqualSequence(expected)

Expected [{"value": 0}] to have at least 2 items, but it only had 1.
`;

exports[`toStrictEqualSequence > fails if the iterable is too short 2`] = `
expect(received).toStrictEqualSequence(expected)

Expected Set {{"value": 0}} to have at least 2 items, but it only had 1.
`;

exports[`toStrictEqualSequence > fails with a non-iterable 1`] = `
expect(received).toStrictEqualSequence(expected)

Expected 0 to be an iterable, but it was not
`;

exports[`toStrictEqualSequence > works with an array 1`] = `
expect(received).toStrictEqualSequence(expected)

Expected {"value": 2} to match {"value": 3} at index 1

Full sequence so far: {"value": 1}, {"value": 2}
`;

exports[`toStrictEqualSequence > works with other iterables 1`] = `
expect(received).toStrictEqualSequence(expected)

Expected {"value": 2} to match {"value": 3} at index 1

Full sequence so far: {"value": 1}, {"value": 2}
`;
