// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`expect.ofEnum > can be aliased to expect.enum 1`] = `expected 'Three' to deeply equal enum<[object Object]>`;

exports[`expect.ofEnum > works when called with a const object 1`] = `expected 3 to deeply equal ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a const object 2`] = `expected +0 to deeply equal not.ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a mixed enum 1`] = `expected 'Three' to deeply equal ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a mixed enum 2`] = `expected +0 to deeply equal not.ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a numeric enum 1`] = `expected 3 to deeply equal ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a numeric enum 2`] = `expected +0 to deeply equal not.ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a string enum 1`] = `expected 'Three' to deeply equal ofEnum<[object Object]>`;

exports[`expect.ofEnum > works when called with a string enum 2`] = `expected 'Zero' to deeply equal not.ofEnum<[object Object]>`;

exports[`toBeEnum > works when called with a const object 1`] = `
expect(received).toBeEnum(expected)

Expected 3 to be a valid enum value. Valid values are: 0, 1, 2.
`;

exports[`toBeEnum > works when called with a const object 2`] = `
expect(received).not.toBeEnum(expected)

Expected 0 not to be a valid enum value. Valid values are: 0, 1, 2.
`;

exports[`toBeEnum > works when called with a mixed enum 1`] = `
expect(received).toBeEnum(expected)

Expected "Three" to be a valid enum value. Valid values are: 0, "One", 2.
`;

exports[`toBeEnum > works when called with a mixed enum 2`] = `
expect(received).not.toBeEnum(expected)

Expected 0 not to be a valid enum value. Valid values are: 0, "One", 2.
`;

exports[`toBeEnum > works when called with a numeric enum 1`] = `
expect(received).toBeEnum(expected)

Expected 3 to be a valid enum value. Valid values are: 0, 1, 2.
`;

exports[`toBeEnum > works when called with a numeric enum 2`] = `
expect(received).not.toBeEnum(expected)

Expected 0 not to be a valid enum value. Valid values are: 0, 1, 2.
`;

exports[`toBeEnum > works when called with a string enum 1`] = `
expect(received).toBeEnum(expected)

Expected "Three" to be a valid enum value. Valid values are: "Zero", "One", "Two".
`;

exports[`toBeEnum > works when called with a string enum 2`] = `
expect(received).not.toBeEnum(expected)

Expected "Zero" not to be a valid enum value. Valid values are: "Zero", "One", "Two".
`;
