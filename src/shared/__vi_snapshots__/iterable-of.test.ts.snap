// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`iterableOf > should match an iterable 1`] = `expected [ 1, 2, 3 ] to deeply equal not.iterableOf<Any<Number>>`;

exports[`iterableOf > should match an iterable 2`] = `expected Set{ 1, 2, 3 } to deeply equal not.iterableOf<Any<Number>>`;

exports[`iterableOf > should not match a non-iterable 1`] = `expected 1 to deeply equal iterableOf<1>`;

exports[`iterableOf > should not match an iterable that contains a different value 1`] = `expected [ 1, 2, 3 ] to deeply equal iterableOf<Any<String>>`;

exports[`iterableOf > should not match an iterable that contains a different value 2`] = `expected Set{ 1, 2, 3 } to deeply equal iterableOf<Any<String>>`;

exports[`recordOf > should match a record 1`] = `expected { a: 1, b: 2, c: 3 } to deeply equal not.recordOf<Any<Number>>`;

exports[`recordOf > should match against keys 1`] = `expected { a: 1, b: 2, c: 3 } to deeply equal not.recordOf{…}`;

exports[`recordOf > should match against keys 2`] = `expected { a: 1, b: 2, c: 3 } to deeply equal recordOf{…}`;

exports[`recordOf > should not match a non-record 1`] = `expected 1 to deeply equal recordOf<1>`;

exports[`recordOf > should not match a record that contains a different value 1`] = `expected { a: 1, b: 2, c: 3 } to deeply equal recordOf<Any<String>>`;

exports[`strictIterableOf > should match an iterable 1`] = `expected [ { a: 1 }, { a: 2 }, { a: 3 } ] to deeply equal not.strictIterableOf{…}`;

exports[`strictIterableOf > should match an iterable 2`] = `expected [ { a: 1 }, { a: 2 }, { a: 3 } ] to deeply equal strictIterableOf{…}`;

exports[`strictIterableOf > should match an iterable 3`] = `expected Set{ { a: 1 }, { a: 2 }, { a: 3 } } to deeply equal not.strictIterableOf{…}`;

exports[`strictIterableOf > should match an iterable 4`] = `expected Set{ { a: 1 }, { a: 2 }, { a: 3 } } to deeply equal strictIterableOf{…}`;

exports[`strictIterableOf > should not match a non-iterable 1`] = `expected 1 to deeply equal strictIterableOf<1>`;

exports[`strictIterableOf > should not match an iterable that contains a different value 1`] = `expected [ { a: 1 }, { a: 2 }, { a: 3 } ] to deeply equal strictIterableOf{…}`;

exports[`strictIterableOf > should not match an iterable that contains a different value 2`] = `expected Set{ { a: 1 }, { a: 2 }, { a: 3 } } to deeply equal strictIterableOf{…}`;

exports[`strictRecordOf > should match a record 1`] = `expected { a: { a: 1 }, b: { a: 2 } } to deeply equal not.strictRecordOf{…}`;

exports[`strictRecordOf > should match a record 2`] = `expected { a: { a: 1 }, b: { a: 2 } } to deeply equal strictRecordOf{…}`;

exports[`strictRecordOf > should match against keys 1`] = `expected { a: { a: 1 }, b: { a: 2 } } to deeply equal not.strictRecordOf{…}`;

exports[`strictRecordOf > should match against keys 2`] = `expected { a: { a: 1 }, b: { a: 2 } } to deeply equal strictRecordOf{…}`;

exports[`strictRecordOf > should not match a non-record 1`] = `expected 1 to deeply equal strictRecordOf<1>`;

exports[`strictRecordOf > should not match a record that contains a different value 1`] = `expected { a: { a: 1 }, b: { a: 2 } } to deeply equal strictRecordOf{…}`;

exports[`toBeIterableOf > should match an iterable that contains only the expected values 1`] = `
expect(received).not.toBeIterableOf(expected)

Expected [1, 2, 3] not to contain only values matching Any<Number>
`;

exports[`toBeIterableOf > should match an iterable that contains only the expected values 2`] = `
expect(received).not.toBeIterableOf(expected)

Expected Set {1, 2, 3} not to contain only values matching Any<Number>
`;

exports[`toBeIterableOf > should not match a non-iterable 1`] = `Expected 1 to be an iterable`;

exports[`toBeIterableOf > should not match an iterable that contains a different value 1`] = `
expect(received).toBeIterableOf(expected)

Expected [1, 2, 3] to contain only values matching Any<String>, but item at index 0 was 1
`;

exports[`toBeIterableOf > should not match an iterable that contains a different value 2`] = `
expect(received).toBeIterableOf(expected)

Expected Set {1, 2, 3} to contain only values matching Any<String>, but item at index 0 was 1
`;

exports[`toBeRecordOf > should match a record that contains only the expected values 1`] = `
expect(received).not.toBeRecordOf(expected)

Expected {"a": 1, "b": 2, "c": 3} not to contain only values matching Any<Number>
`;

exports[`toBeRecordOf > should match against keys 1`] = `
expect(received).not.toBeRecordOf(expected)

Expected {"a": 1, "b": 2, "c": 3} not to contain only values matching Any<Number>
`;

exports[`toBeRecordOf > should match against keys 2`] = `
expect(received).toBeRecordOf(expected)

Expected {"a": 1, "b": 2, "c": 3} to contain only keys matching oneOf<Array [
  "a",
  "b",
]>, but found key "c"
`;

exports[`toBeRecordOf > should not match a non-record 1`] = `Expected 1 to be an object, but it was "number"`;

exports[`toBeRecordOf > should not match a record that contains a different value 1`] = `
expect(received).toBeRecordOf(expected)

Expected {"a": 1, "b": 2, "c": 3} to contain only values matching Any<String>, but item at key a was 1
`;

exports[`toBeStrictIterableOf > should match an iterable that contains only the expected values 1`] = `
expect(received).not.toBeStrictIterableOf(expected)

Expected [{"a": 1}, {"a": 2}, {"a": 3}] not to contain only values matching {"a": Any<Number>}
`;

exports[`toBeStrictIterableOf > should match an iterable that contains only the expected values 2`] = `
expect(received).toBeStrictIterableOf(expected)

Expected [{"a": 1}, {"a": 2}, {"a": 3}] to contain only values matching {"a": Any<Number>, "b": undefined}, but item at index 0 was {"a": 1}
`;

exports[`toBeStrictIterableOf > should match an iterable that contains only the expected values 3`] = `
expect(received).not.toBeStrictIterableOf(expected)

Expected Set {{"a": 1}, {"a": 2}, {"a": 3}} not to contain only values matching {"a": Any<Number>}
`;

exports[`toBeStrictIterableOf > should match an iterable that contains only the expected values 4`] = `
expect(received).toBeStrictIterableOf(expected)

Expected Set {{"a": 1}, {"a": 2}, {"a": 3}} to contain only values matching {"a": Any<Number>, "b": undefined}, but item at index 0 was {"a": 1}
`;

exports[`toBeStrictIterableOf > should not match a non-iterable 1`] = `Expected 1 to be an iterable`;

exports[`toBeStrictIterableOf > should not match an iterable that contains a different value 1`] = `
expect(received).toBeStrictIterableOf(expected)

Expected [{"a": 1}, {"a": 2}, {"a": 3}] to contain only values matching {"a": Any<String>}, but item at index 0 was {"a": 1}
`;

exports[`toBeStrictIterableOf > should not match an iterable that contains a different value 2`] = `
expect(received).toBeStrictIterableOf(expected)

Expected Set {{"a": 1}, {"a": 2}, {"a": 3}} to contain only values matching {"a": Any<String>}, but item at index 0 was {"a": 1}
`;

exports[`toBeStrictRecordOf > should match a record that contains only the expected values 1`] = `
expect(received).not.toBeStrictRecordOf(expected)

Expected {"a": {"a": 1}, "b": {"a": 2}} not to contain only values matching {"a": Any<Number>}
`;

exports[`toBeStrictRecordOf > should match a record that contains only the expected values 2`] = `
expect(received).toBeStrictRecordOf(expected)

Expected {"a": {"a": 1}, "b": {"a": 2}} to contain only values matching {"a": Any<Number>, "b": undefined}, but item at key a was {"a": 1}
`;

exports[`toBeStrictRecordOf > should match against keys 1`] = `
expect(received).not.toBeStrictRecordOf(expected)

Expected {"a": {"a": 1}, "b": {"a": 2}} not to contain only values matching {"a": Any<Number>}
`;

exports[`toBeStrictRecordOf > should match against keys 2`] = `
expect(received).toBeStrictRecordOf(expected)

Expected {"a": {"a": 1}, "b": {"a": 2}} to contain only keys matching oneOf<Array [
  "a",
]>, but found key "b"
`;

exports[`toBeStrictRecordOf > should not match a non-record 1`] = `Expected 1 to be an object, but it was "number"`;

exports[`toBeStrictRecordOf > should not match a record that contains a different value 1`] = `
expect(received).toBeStrictRecordOf(expected)

Expected {"a": {"a": 1}, "b": {"a": 2}} to contain only values matching {"a": Any<String>}, but item at key a was {"a": 1}
`;
