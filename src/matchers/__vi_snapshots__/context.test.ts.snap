// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`toHaveBeenCalledWithContext > includes the custom mock name in the error message 1`] = `
expect(named-mock).not.toHaveBeenCalledWithContext(expected)

Expected: not "foo"
Received:     "foo"

Number of calls: 1
`;

exports[`toHaveBeenCalledWithContext > works only on spies or fn 1`] = `
expect(received).toHaveBeenCalledWithContext(expected)

Matcher error: received value must be a mock or spy function

Received has type:  function
Received has value: [Function mock2]
`;

exports[`toHaveBeenCalledWithContext > works when not called 1`] = `
expect(spy).toHaveBeenCalledWithContext(expected)

Expected: "foo"

Number of calls: 0
`;

exports[`toHaveBeenCalledWithContext > works with a context that doesn't match 1`] = `
expect(spy).toHaveBeenCalledWithContext(expected)

Expected: "foo"
Received: "bar"
Number of calls: 1
`;

exports[`toHaveBeenCalledWithContext > works with a context that doesn't match with matchers 1`] = `
expect(spy).toHaveBeenCalledWithContext(expected)

Expected: Any<Number>
Received: "bar"
Number of calls: 1
`;

exports[`toHaveBeenCalledWithContext > works with a context that matches 1`] = `
expect(spy).not.toHaveBeenCalledWithContext(expected)

Expected: not "foo"
Received:     "foo"

Number of calls: 1
`;

exports[`toHaveBeenCalledWithContext > works with a context that matches with a matcher 1`] = `
expect(spy).not.toHaveBeenCalledWithContext(expected)

Expected: not Any<String>
Received:     "foo"

Number of calls: 1
`;

exports[`toHaveBeenLastCalledWithContext > includes the custom mock name in the error message 1`] = `
expect(named-mock).not.toHaveBeenLastCalledWithContext(expected)

Expected: not "foo"

Number of calls: 1
`;

exports[`toHaveBeenLastCalledWithContext > works only on spies or fn 1`] = `
expect(received).toHaveBeenLastCalledWithContext(expected)

Matcher error: received value must be a mock or spy function

Received has type:  function
Received has value: [Function mock2]
`;

exports[`toHaveBeenLastCalledWithContext > works when not called 1`] = `
expect(spy).toHaveBeenLastCalledWithContext(expected)

Expected: "foo"

Number of calls: 0
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that doesn't match 1`] = `
expect(spy).toHaveBeenLastCalledWithContext(expected)

Expected: "foo"
Received: "bar"
Number of calls: 1
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that doesn't match with matchers 1`] = `
expect(spy).toHaveBeenLastCalledWithContext(expected)

Expected: Any<Number>
Received: "bar"
Number of calls: 1
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that matches 1`] = `
expect(spy).not.toHaveBeenLastCalledWithContext(expected)

Expected: not "foo"

Number of calls: 1
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that matches with a matcher 1`] = `
expect(spy).not.toHaveBeenLastCalledWithContext(expected)

Expected: not Any<String>
Received:     "foo"

Number of calls: 1
`;

exports[`toHaveBeenNthCalledWithContext > includes the custom mock name in the error message 1`] = `
expect(named-mock).not.toHaveBeenNthCalledWithContext(n, expected)

n: 1
Expected: not "foo"

Number of calls: 1
`;

exports[`toHaveBeenNthCalledWithContext > works only on spies or fn 1`] = `
expect(received).toHaveBeenNthCalledWithContext(n, expected)

Matcher error: received value must be a mock or spy function

Received has type:  function
Received has value: [Function mock2]
`;

exports[`toHaveBeenNthCalledWithContext > works when not called 1`] = `
expect(spy).toHaveBeenNthCalledWithContext(n, expected)

n: 1
Expected: "foo"

Number of calls: 0
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that doesn't match 1`] = `
expect(spy).toHaveBeenNthCalledWithContext(n, expected)

n: 1
Expected: "foo"
Received: "bar"
Number of calls: 1
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that doesn't match with matchers 1`] = `
expect(spy).toHaveBeenNthCalledWithContext(n, expected)

n: 1
Expected: Any<Number>
Received: "bar"
Number of calls: 1
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that matches 1`] = `
expect(spy).not.toHaveBeenNthCalledWithContext(n, expected)

n: 1
Expected: not "foo"

Number of calls: 1
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that matches with a matcher 1`] = `
expect(spy).not.toHaveBeenNthCalledWithContext(n, expected)

n: 1
Expected: not Any<String>
Received:     "foo"

Number of calls: 1
`;
