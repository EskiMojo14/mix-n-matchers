"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[199],{4717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"setup","title":"Setup","description":"Mix \'n\' Matchers is a set of custom Jest matchers, aiming to fill perceived gaps in the Jest matcher ecosystem. This guide will help you get started.","source":"@site/docs/setup.mdx","sourceDirName":".","slug":"/","permalink":"/mix-n-matchers/","draft":false,"unlisted":false,"editUrl":"https://github.com/EskiMojo14/mix-n-matchers/tree/main/website/docs/setup.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"slug":"/"},"sidebar":"docs","next":{"title":"expect.exactly(value)","permalink":"/mix-n-matchers/matchers/exactly"}}');var s=n(7968),r=n(4318),i=n(6342),c=n(6503);const o={sidebar_position:1,slug:"/"},l="Setup",m={},h=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Automatic setup",id:"automatic-setup",level:3},{value:"Manual setup",id:"manual-setup",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"setup",children:"Setup"})}),"\n",(0,s.jsx)(t.p,{children:"Mix 'n' Matchers is a set of custom Jest matchers, aiming to fill perceived gaps in the Jest matcher ecosystem. This guide will help you get started."}),"\n",(0,s.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.p,{children:"Install with your package manager of choice:"}),"\n","\n",(0,s.jsxs)(i.A,{groupId:"package-manager",children:[(0,s.jsx)(c.A,{value:"npm",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\nnpm install -D mix-n-matchers\n\n"})})}),(0,s.jsx)(c.A,{value:"yarn",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\nyarn add -D mix-n-matchers\n\n"})})}),(0,s.jsx)(c.A,{value:"bun",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\nbun add -D mix-n-matchers\n\n"})})})]}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(t.h3,{id:"automatic-setup",children:"Automatic setup"}),"\n",(0,s.jsx)(t.p,{children:"The easiest way to add the matchers to your environment is by importing one of the automatic setup files, which will add all of the matchers for you."}),"\n",(0,s.jsx)(t.p,{children:"Import one of these into a setup file, and include that setup file in your Jest/Vitest configuration. Using this setup will also ensure that the matchers are available in your TypeScript files."}),"\n",(0,s.jsxs)(i.A,{groupId:"test-runner",children:[(0,s.jsxs)(c.A,{value:"Jest",default:!0,children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport "mix-n-matchers/all";\n\n'})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"\nimport type { Config } from 'jest';\n\nconst config: Config = {\n  setupFilesAfterEnv: [\"<rootDir>/test-setup.ts\"]\n};\n\nexport default config;\n\n"})})]}),(0,s.jsxs)(c.A,{value:"Jest (no globals)",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport "mix-n-matchers/jest-globals";\n\n'})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"\nimport type { Config } from 'jest';\n\nconst config: Config = {\n  injectGlobals: false,\n  setupFilesAfterEnv: [\"<rootDir>/test-setup.ts\"]\n};\n\nexport default config;\n\n"})})]}),(0,s.jsxs)(c.A,{value:"Vitest",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport "mix-n-matchers/vitest";\n\n'})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="vitest.config.ts"',children:'\nexport default defineConfig({\n  test: {\n    setupFiles: ["./test-setup.ts"],\n  },\n})\n\n'})})]})]}),"\n",(0,s.jsx)(t.h3,{id:"manual-setup",children:"Manual setup"}),"\n",(0,s.jsx)(t.p,{children:"If you'd prefer to add the matchers manually, you can import the individual matchers as needed into your setup file."}),"\n",(0,s.jsxs)(i.A,{groupId:"test-runner",children:[(0,s.jsx)(c.A,{value:"Jest",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'import {\n  toHaveBeenCalledWithContext,\n  toHaveBeenLastCalledWithContext,\n  toHaveBeenNthCalledWithContext,\n  exactly,\n} from "mix-n-matchers";\nimport type { MixNMatchersFrom, AsymmetricMixNMatchersFrom } from "mix-n-matchers";\n\nconst matchers = {\n  toHaveBeenCalledWithContext,\n  toHaveBeenLastCalledWithContext,\n  toHaveBeenNthCalledWithContext,\n  exactly,\n};\n\nexpect.extend(matchers);\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R, T> extends MixNMatchersFrom<typeof matchers, R, T> {}\n\n    interface Expect extends AsymmetricMixNMatchersFrom<typeof matchers> {}\n\n    interface InverseAsymmetricMatchers\n      extends AsymmetricMixNMatchersFrom<typeof matchers> {}\n  }\n}\n\n'})})}),(0,s.jsx)(c.A,{value:"Jest (no globals)",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport { expect } from "@jest/globals";\nimport {\n  toHaveBeenCalledWithContext,\n  toHaveBeenLastCalledWithContext,\n  toHaveBeenNthCalledWithContext,\n  exactly,\n} from "mix-n-matchers";\nimport type { MixNMatchersFrom, AsymmetricMixNMatchersFrom } from "mix-n-matchers";\n\nconst matchers = {\n  toHaveBeenCalledWithContext,\n  toHaveBeenLastCalledWithContext,\n  toHaveBeenNthCalledWithContext,\n  exactly,\n};\n\nexpect.extend(matchers);\n\ndeclare module "@jest/expect" {\n  interface Matchers<R, T> extends MixNMatchersFrom<typeof matchers, R, T> {}\n  interface AsymmetricMatchers\n    extends AsymmetricMixNMatchersFrom<typeof matchers> {}\n}\n\n'})})}),(0,s.jsx)(c.A,{value:"Vitest",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport { expect } from "vitest";\nimport {\n  toHaveBeenCalledWithContext,\n  toHaveBeenLastCalledWithContext,\n  toHaveBeenNthCalledWithContext,\n  exactly,\n} from "mix-n-matchers";\nimport type { MixNMatchersFrom, AsymmetricMixNMatchersFrom } from "mix-n-matchers";\n\nconst matchers = {\n  toHaveBeenCalledWithContext,\n  toHaveBeenLastCalledWithContext,\n  toHaveBeenNthCalledWithContext,\n  exactly,\n};\n\nexpect.extend(matchers);\n\ndeclare module "vitest" {\n  interface Assertion<T> extends MixNMatchersFrom<typeof matchers, void, T> {}\n  interface AsymmetricMatchersContaining\n    extends AsymmetricMixNMatchersFrom<typeof matchers> {}\n}\n\n'})})})]}),"\n",(0,s.jsxs)(t.admonition,{title:"Asymmetric Matchers vs Symmetric Matchers",type:"note",children:[(0,s.jsxs)(t.p,{children:["When ",(0,s.jsx)(t.code,{children:"expect.extend"})," is called, each matcher is added as both an asymmetric and symmetric matcher."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'expect.extend({\n  foo(received) {\n    const pass = received === "foo";\n    return {\n      pass,\n      message: pass ? () => "Expected \'foo\'" : () => "Expected not \'foo\'",\n    };\n  },\n});\n\nexpect(value).foo(); // symmetric\n\nexpect(value).toEqual(expect.foo()); // asymmetric\n'})}),(0,s.jsxs)(t.p,{children:["However, conventionally there is a difference in how these matchers are named. For example, ",(0,s.jsx)(t.code,{children:".toBeAnArray()"})," vs ",(0,s.jsx)(t.code,{children:"expect.array()"}),"."]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"mix-n-matchers"})," intentionally only exposes types for matchers as ",(0,s.jsx)(t.em,{children:"either"})," asymmetric or symmetric, and not both. Sometimes a matcher is available as both, but with different names. For example, ",(0,s.jsxs)(t.a,{href:"/matchers/enums",children:[(0,s.jsx)(t.code,{children:".toBeEnum()"})," and ",(0,s.jsx)(t.code,{children:"expect.ofEnum"})]}),"."]}),(0,s.jsx)(t.p,{children:"This helps to avoid confusion and makes it clear which matchers are designed to be asymmetric and which are symmetric."}),(0,s.jsx)(t.p,{children:"If there's any existing matchers that are only available as asymmetric matchers and you'd like to use them as symmetric matchers (or vice versa), please open an issue or a pull request!"}),(0,s.jsx)(t.p,{children:"You can of course choose to setup the matchers as both asymmetric and symmetric matchers if you prefer."}),(0,s.jsxs)(i.A,{groupId:"test-runner",children:[(0,s.jsx)(c.A,{value:"Jest",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'import { typeOf, toHaveBeenCalledWithContext } from "mix-n-matchers";\nimport type { \n  MixNMatchers,\n  MixNMatchersFrom,\n  AsymmetricMixNMatchers,\n  AsymmetricMixNMatchersFrom\n} from "mix-n-matchers";\n\nconst matchers = {\n  typeOf,\n  toBeTypeOf: typeOf,\n  toHaveBeenCalledWithContext,\n  calledWithContext: toHaveBeenCalledWithContext,\n};\n\nexpect.extend(matchers);\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R, T> extends MixNMatchersFrom<typeof matchers, R, T> {\n      toBeTypeOf: AsymmetricMixNMatchers["typeOf"];\n    }\n\n    interface Expect extends AsymmetricMixNMatchersFrom<typeof matchers> {\n        calledWithContext: MixNMatchers<void, any>["toHaveBeenCalledWithContext"];\n    }\n\n    interface InverseAsymmetricMatchers\n      extends AsymmetricMixNMatchersFrom<typeof matchers> {\n        calledWithContext: MixNMatchers<void, any>["toHaveBeenCalledWithContext"];\n    }\n  }\n}\n\n'})})}),(0,s.jsx)(c.A,{value:"Jest (no globals)",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport { expect } from "@jest/globals";\nimport { typeOf, toHaveBeenCalledWithContext } from "mix-n-matchers";\nimport type {\n  MixNMatchers,\n  MixNMatchersFrom,\n  AsymmetricMixNMatchers,\n  AsymmetricMixNMatchersFrom\n} from "mix-n-matchers";\n\nconst matchers = {\n  typeOf,\n  toBeTypeOf: typeOf,\n  toHaveBeenCalledWithContext,\n  calledWithContext: toHaveBeenCalledWithContext,\n};\n\nexpect.extend(matchers);\n\ndeclare module "@jest/expect" {\n  interface Matchers<R, T> extends MixNMatchersFrom<typeof matchers, R, T> {\n      toBeTypeOf: AsymmetricMixNMatchers["typeOf"];\n  }\n  interface AsymmetricMatchers extends AsymmetricMixNMatchersFrom<typeof matchers> {\n      calledWithContext: MixNMatchers<void, any>["toHaveBeenCalledWithContext"];\n  }\n}\n\n'})})}),(0,s.jsx)(c.A,{value:"Vitest",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="test-setup.ts"',children:'\nimport { expect } from "vitest";\nimport { typeOf, toHaveBeenCalledWithContext } from "mix-n-matchers";\nimport type { \n  MixNMatchers,\n  MixNMatchersFrom,\n  AsymmetricMixNMatchers,\n  AsymmetricMixNMatchersFrom\n} from "mix-n-matchers";\n\nconst matchers = {\n  typeOf,\n  toBeTypeOf: typeOf,\n  toHaveBeenCalledWithContext,\n  calledWithContext: toHaveBeenCalledWithContext,\n};\n\nexpect.extend(matchers);\n\ndeclare module "vitest" {\n  interface Assertion<T> extends MixNMatchersFrom<typeof matchers, void, T> {\n      toBeTypeOf: AsymmetricMixNMatchers["typeOf"];\n  }\n  interface AsymmetricMatchersContaining\n    extends AsymmetricMixNMatchersFrom<typeof matchers> {\n      calledWithContext: MixNMatchers<void, any>["toHaveBeenCalledWithContext"];\n  }\n}\n\n'})})})]})]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},6342:(e,t,n)=>{n.d(t,{A:()=>b});var a=n(4700),s=n(3372),r=n(3731),i=n(3263),c=n(7530),o=n(4212),l=n(8637),m=n(1487);function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)(()=>{const e=t??function(e){return h(e).map(({props:{value:e,label:t,attributes:n,default:a}})=>({value:e,label:t,attributes:n,default:a}))}(n);return function(e){const t=(0,l.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function u({value:e,tabValues:t}){return t.some(t=>t.value===e)}function x({queryString:e=!1,groupId:t}){const n=(0,i.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})},[s,n])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,r=d(e),[i,o]=(0,a.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r})),[l,h]=x({queryString:n,groupId:s}),[p,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,s]=(0,m.Dv)(t);return[n,(0,a.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:s}),y=(()=>{const e=l??p;return u({value:e,tabValues:r})?e:null})();(0,c.A)(()=>{y&&o(y)},[y]);return{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),f(e)},[h,f,r]),tabValues:r}}var f=n(1698);const y={tabList:"tabList_vooe",tabItem:"tabItem_xcYg"};var v=n(7968);function g({className:e,block:t,selectedValue:n,selectValue:a,tabValues:i}){const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),l=e=>{const t=e.currentTarget,s=c.indexOf(t),r=i[s].value;r!==n&&(o(t),a(r))},m=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:i.map(({value:e,label:t,attributes:a})=>(0,v.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{c.push(e)},onKeyDown:m,onClick:l,...a,className:(0,s.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function j({lazy:e,children:t,selectedValue:n}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===n);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function M(e){const t=p(e);return(0,v.jsxs)("div",{className:(0,s.A)("tabs-container",y.tabList),children:[(0,v.jsx)(g,{...t,...e}),(0,v.jsx)(j,{...t,...e})]})}function b(e){const t=(0,f.A)();return(0,v.jsx)(M,{...e,children:h(e.children)},String(t))}},6503:(e,t,n)=>{n.d(t,{A:()=>i});n(4700);var a=n(3372);const s={tabItem:"tabItem_ELpC"};var r=n(7968);function i({children:e,hidden:t,className:n}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,n),hidden:t,children:e})}}}]);