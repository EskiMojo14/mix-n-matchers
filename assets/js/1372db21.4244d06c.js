"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[397],{6474:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>h,default:()=>r,frontMatter:()=>s,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"matchers/mocks","title":"Mocks","description":".toHaveBeenCalledWithContext(context)","source":"@site/docs/matchers/mocks.mdx","sourceDirName":"matchers","slug":"/matchers/mocks","permalink":"/mix-n-matchers/matchers/mocks","draft":false,"unlisted":false,"editUrl":"https://github.com/EskiMojo14/mix-n-matchers/tree/main/website/docs/matchers/mocks.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Enums","permalink":"/mix-n-matchers/matchers/enums"}}');var o=n(7968),a=n(4318),l=n(4679);const s={},h="Mocks",i={},d=[{value:"<code>.toHaveBeenCalledWithContext(context)</code>",id:"tohavebeencalledwithcontextcontext",level:2},{value:"<code>.toHaveBeenLastCalledWithContext(context)</code>",id:"tohavebeenlastcalledwithcontextcontext",level:2},{value:"<code>.toHaveBeenNthCalledWithContext(nthCall, context)</code>",id:"tohavebeennthcalledwithcontextnthcall-context",level:2}];function x(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"mocks",children:"Mocks"})}),"\n",(0,o.jsx)(t.h2,{id:"tohavebeencalledwithcontextcontext",children:(0,o.jsx)(t.code,{children:".toHaveBeenCalledWithContext(context)"})}),"\n",(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:".toHaveBeenCalledWithContext"})," to assert that a mock function was called with a specific context (",(0,o.jsx)(t.code,{children:"this"})," value)."]}),"\n",(0,o.jsx)(l.Z,{name:"toHaveBeenCalledWithContext",children:'\nconst mock = jest.fn();\nconst context = {};\n\nmock.call(context);\n\nit("was called with the context", () => {\nexpect(mock).toHaveBeenCalledWithContext(context);\n});\n'}),"\n",(0,o.jsx)(t.h2,{id:"tohavebeenlastcalledwithcontextcontext",children:(0,o.jsx)(t.code,{children:".toHaveBeenLastCalledWithContext(context)"})}),"\n",(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:".toHaveBeenLastCalledWithContext"})," to assert that a mock function was last called with a specific context (",(0,o.jsx)(t.code,{children:"this"})," value)."]}),"\n",(0,o.jsx)(l.Z,{name:"toHaveBeenLastCalledWithContext",children:'\n\nconst mock = jest.fn();\nconst context = {};\n\nmock.call({});\nmock.call(context);\n\nit("was last called with the context", () => {\nexpect(mock).toHaveBeenLastCalledWithContext(context);\n});\n'}),"\n",(0,o.jsx)(t.h2,{id:"tohavebeennthcalledwithcontextnthcall-context",children:(0,o.jsx)(t.code,{children:".toHaveBeenNthCalledWithContext(nthCall, context)"})}),"\n",(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:".toHaveBeenNthCalledWithContext"})," to assert that a mock function was called at a specific index with a specific context (",(0,o.jsx)(t.code,{children:"this"})," value)."]}),"\n",(0,o.jsx)(l.Z,{name:"toHaveBeenNthCalledWithContext",children:'\nconst mock = jest.fn();\nconst context = {};\n\nmock.call({});\nmock.call(context);\nmock.call({});\n\nit("was nth called with the context", () => {\nexpect(mock).toHaveBeenNthCalledWithContext(2, context);\n});\n'})]})}function r(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}}}]);