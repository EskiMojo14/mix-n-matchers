"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[310],{7871:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"matchers/collections/iterables","title":"Iterables","description":".toBeIterableOf(expected)","source":"@site/docs/matchers/collections/iterables.mdx","sourceDirName":"matchers/collections","slug":"/matchers/collections/iterables","permalink":"/mix-n-matchers/matchers/collections/iterables","draft":false,"unlisted":false,"editUrl":"https://github.com/EskiMojo14/mix-n-matchers/tree/main/website/docs/matchers/collections/iterables.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Containing Only","permalink":"/mix-n-matchers/matchers/collections/containingOnly"},"next":{"title":"Records","permalink":"/mix-n-matchers/matchers/collections/records"}}');var c=t(7968),s=t(4318),i=t(4679);const r={sidebar_position:1},l="Iterables",o={},u=[{value:"<code>.toBeIterableOf(expected)</code>",id:"tobeiterableofexpected",level:2},{value:"<code>.toBeSequence(...sequence)</code>",id:"tobesequencesequence",level:2},{value:"<code>.toEqualSequence(...sequence)</code>",id:"toequalsequencesequence",level:2},{value:"<code>.toSatisfySequence(...predicates)</code>",id:"tosatisfysequencepredicates",level:2},{value:"<code>.toContainSequence(...sequence)</code>",id:"tocontainsequencesequence",level:2},{value:"<code>.toContainEqualSequence(...sequence)</code>",id:"tocontainequalsequencesequence",level:2},{value:"<code>.toContainSequenceSatisfying(...predicates)</code>",id:"tocontainsequencesatisfyingpredicates",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"iterables",children:"Iterables"})}),"\n",(0,c.jsx)(n.h2,{id:"tobeiterableofexpected",children:(0,c.jsx)(n.code,{children:".toBeIterableOf(expected)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.iterableOf(expected)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toBeIterableOf"})," to assert that a value is an iterable where each item matches the ",(0,c.jsx)(n.code,{children:"expected"})," value, using deep equality."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:".toBeStrictIterableOf(expected)"})," and ",(0,c.jsx)(n.code,{children:"expect.strictIterableOf(expected)"})," are also available to use ",(0,c.jsx)(n.a,{href:"https://jestjs.io/docs/expect#tostrictequalvalue",children:"strict deep equality"}),"."]}),"\n",(0,c.jsx)(i.Z,{name:"toBeIterableOf",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable of the expected values", () => {\nexpect(array).toBeIterableOf(expect.any(Number));\nexpect(set).toBeIterableOf(expect.any(Number));\n});\n'}),"\n",(0,c.jsx)(n.h2,{id:"tobesequencesequence",children:(0,c.jsx)(n.code,{children:".toBeSequence(...sequence)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.sequenceMatching(...sequence)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toBeSequence"})," to assert that a value is an iterable with the exact sequence of values, using reference equality."]}),"\n",(0,c.jsx)(i.Z,{name:"toBeSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable with the exact sequence of values", () => {\nexpect(array).toBeSequence(1, 1, 2, 3);\nexpect(set).toBeSequence(1, 2, 3);\n});\n'}),"\n",(0,c.jsx)(n.h2,{id:"toequalsequencesequence",children:(0,c.jsx)(n.code,{children:".toEqualSequence(...sequence)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.sequenceOf(...sequence)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toEqualSequence"})," to assert that a value is an iterable with the exact sequence of values."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:".toStrictEqualSequence(...sequence)"})," and ",(0,c.jsx)(n.code,{children:"expect.strictSequenceOf(...sequence)"})," are also available to use ",(0,c.jsx)(n.a,{href:"https://jestjs.io/docs/expect#tostrictequalvalue",children:"strict deep equality"}),"."]}),"\n",(0,c.jsx)(i.Z,{name:"toEqualSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable with the exact sequence of values", () => {\nexpect(array).toEqualSequence(1, 1, 2, 3);\nexpect(set).toEqualSequence(1, 2, 3);\n});\n'}),"\n",(0,c.jsx)(n.h2,{id:"tosatisfysequencepredicates",children:(0,c.jsx)(n.code,{children:".toSatisfySequence(...predicates)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.sequence(...predicates)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toSatisfySequence"})," to assert that a value is an iterable where each item satisfies the corresponding predicate."]}),"\n",(0,c.jsx)(i.Z,{name:"toSatisfySequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable where each item satisfies the corresponding predicate", () => {\nexpect(array).toSatisfySequence(\n  (value) => value === 1,\n  (value) => value === 1,\n  (value) => value === 2,\n  (value) => value === 3\n);\nexpect(set).toSatisfySequence(\n  (value) => value === 1,\n  (value) => value === 2,\n  (value) => value === 3\n);\n});\n'}),"\n",(0,c.jsx)(n.h2,{id:"tocontainsequencesequence",children:(0,c.jsx)(n.code,{children:".toContainSequence(...sequence)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.containingSequence(...sequence)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toContainSequence"})," to assert that a value is an iterable that contains the expected sequence of values, using reference equality."]}),"\n",(0,c.jsx)(i.Z,{name:"toContainSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable that contains the exact sequence of values", () => {\nexpect(array).toContainSequence(1, 2);\nexpect(set).toContainSequence(1, 2);\n});\n'}),"\n",(0,c.jsx)(n.h2,{id:"tocontainequalsequencesequence",children:(0,c.jsx)(n.code,{children:".toContainEqualSequence(...sequence)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.containingEqualSequence(...sequence)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toContainEqualSequence"})," to assert that a value is an iterable that contains the expected sequence of values, using deep equality."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:".toContainStrictEqualSequence(...sequence)"})," and ",(0,c.jsx)(n.code,{children:"expect.containingStrictEqualSequence(...sequence)"})," are also available to use ",(0,c.jsx)(n.a,{href:"https://jestjs.io/docs/expect#tostrictequalvalue",children:"strict deep equality"}),"."]}),"\n",(0,c.jsx)(i.Z,{name:"toContainEqualSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable that contains the exact sequence of values", () => {\nexpect(array).toContainEqualSequence(1, 2);\nexpect(set).toContainEqualSequence(1, 2);\n});\n'}),"\n",(0,c.jsx)(n.h2,{id:"tocontainsequencesatisfyingpredicates",children:(0,c.jsx)(n.code,{children:".toContainSequenceSatisfying(...predicates)"})}),"\n",(0,c.jsxs)(n.p,{children:["Also available as an asymmetric matcher, ",(0,c.jsx)(n.code,{children:"expect.containingSequenceSatisfying(...predicates)"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:".toContainSequenceSatisfying"})," to assert that a value is an iterable that contains the expected sequence of values, where each item satisfies the corresponding predicate."]}),"\n",(0,c.jsx)(i.Z,{name:"toContainSequenceSatisfying",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable that contains the exact sequence of values", () => {\nexpect(array).toContainSequenceSatisfying(\n  (value) => value === 1,\n  (value) => value === 2\n);\nexpect(set).toContainSequenceSatisfying(\n  (value) => value === 1,\n  (value) => value === 2\n);\n});\n'})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);